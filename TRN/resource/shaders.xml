<shaders>
	<shader type="vertex" name="room"><![CDATA[
		uniform vec3 tintColor;
		uniform vec3 flickerColor;
		uniform float curTime;
		uniform vec4 offsetRepeat;
		uniform float rnd;

		attribute vec4 flags;

		varying vec2 vUv;
		varying vec3 vColor;

		const vec3 vec3Unit = vec3(1.0, 1.0, 1.0);

		void main() {
			vec3 pos = position;

			vUv = uv * offsetRepeat.zw + offsetRepeat.xy;

			vColor = color * tintColor * mix(vec3Unit, mix(vec3Unit, flickerColor, step(0.75, rnd)), flags.y);

			float sum = position[0] + position[1] + position[2];
			float time = curTime * 0.00157;

			// perturb the vertex color (for underwater effect, for eg)
			float perturb = 0.5 * abs( sin(sum * 8.0 + time) ) + 0.5;
			vColor *= mix(1.0, perturb, flags.x);

			// perturb the vertex position
			pos.x += mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);
			pos.y -= mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);
			pos.z -= mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);

			vec4 mvPosition;
			mvPosition = modelViewMatrix * vec4( pos, 1.0 );
			gl_Position = projectionMatrix * mvPosition;
		}
	]]></shader>

	<shader type="vertex" name="mesh"><![CDATA[
		uniform vec3 tintColor;
		uniform vec3 flickerColor;
		uniform float curTime;
		uniform vec4 offsetRepeat;
		uniform float rnd;
		uniform float lighting;

		attribute vec4 flags;

		varying vec2 vUv;
		varying vec3 vColor;

		const vec3 vec3Unit = vec3(1.0, 1.0, 1.0);

		void main() {
			vec3 pos = position;

			vUv = uv * offsetRepeat.zw + offsetRepeat.xy;

			float fcolor = max(0.0, 1.0 - 2.0 * max(0.0, lighting-flags.w));
			vColor = vec3(fcolor, fcolor, fcolor) * tintColor * mix(vec3Unit, mix(vec3Unit, flickerColor, step(0.75, rnd)), flags.y);

			float sum = position[0] + position[1] + position[2];
			float time = curTime * 0.00157;

			// perturb the vertex color (for underwater effect, for eg)
			float perturb = 0.5 * abs( sin(sum * 8.0 + time) ) + 0.5;
			vColor *= mix(1.0, perturb, flags.x);

			// perturb the vertex position
			pos.x += mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);
			pos.y -= mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);
			pos.z -= mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);

			vec4 mvPosition;
			mvPosition = modelViewMatrix * vec4( pos, 1.0 );
			gl_Position = projectionMatrix * mvPosition;
		}
	]]></shader>

	<shader type="vertex" name="mesh2"><![CDATA[
		uniform vec3 tintColor;
		uniform vec3 flickerColor;
		uniform float curTime;
		uniform vec4 offsetRepeat;
		uniform float rnd;
		uniform vec3 lighting;

		attribute vec4 flags;

		varying vec2 vUv;
		varying vec3 vColor;

		const vec3 vec3Unit = vec3(1.0, 1.0, 1.0);

		void main() {
			vec3 pos = position;

			vUv = uv * offsetRepeat.zw + offsetRepeat.xy;

			vColor = color * lighting * tintColor * mix(vec3Unit, mix(vec3Unit, flickerColor, step(0.75, rnd)), flags.y);

			float sum = position[0] + position[1] + position[2];
			float time = curTime * 0.00157;

			// perturb the vertex color (for underwater effect, for eg)
			float perturb = 0.5 * abs( sin(sum * 8.0 + time) ) + 0.5;
			vColor *= mix(1.0, perturb, flags.x);

			// perturb the vertex position
			pos.x += mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);
			pos.y -= mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);
			pos.z -= mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);

			vec4 mvPosition;
			mvPosition = modelViewMatrix * vec4( pos, 1.0 );
			gl_Position = projectionMatrix * mvPosition;
		}
	]]></shader>

	<shader type="vertex" name="moveable"><![CDATA[

		uniform vec3 tintColor;
		uniform vec3 flickerColor;
		uniform float curTime;
		uniform vec4 offsetRepeat;
		uniform float rnd;
		uniform float lighting;

		attribute vec4 flags;

		varying vec2 vUv;
		varying vec3 vColor;

		const vec3 vec3Unit = vec3(1.0, 1.0, 1.0);

		#ifdef BONE_TEXTURE
		uniform sampler2D boneTexture;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, N_BONE_PIXEL_X );
			float y = floor( j / N_BONE_PIXEL_X );
			const float dx = 1.0 / N_BONE_PIXEL_X;
			const float dy = 1.0 / N_BONE_PIXEL_Y;
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
		#else
		uniform mat4 boneGlobalMatrices[ 64 ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneGlobalMatrices[ int(i) ];
			return bone;
		}
		#endif
		
		void main() {
			mat4 boneMatX = getBoneMatrix( skinIndex.x );
			mat4 boneMatY = getBoneMatrix( skinIndex.y );

			vec4 skinVertex = vec4( position, 1.0 );
			vec4 skinned  = boneMatX * skinVertex * skinWeight.x;
			skinned 	  += boneMatY * skinVertex * skinWeight.y;

			vUv = uv * offsetRepeat.zw + offsetRepeat.xy;

			float fcolor = max(0.0, 1.0 - 2.0 * max(0.0, lighting-flags.w));
			vColor = vec3(fcolor, fcolor, fcolor) * tintColor * mix(vec3Unit, mix(vec3Unit, flickerColor, step(0.75, rnd)), flags.y);

			float sum = position[0] + position[1] + position[2];
			float time = curTime * 0.00157;

			// perturb the vertex color (for underwater effect, for eg)
			float perturb = 0.5 * abs( sin(sum * 8.0 + time) ) + 0.5;
			vColor *= mix(1.0, perturb, flags.x);

			// perturb the vertex position
			vec4 pos = skinned;

			pos.x += mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);
			pos.y -= mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);
			pos.z -= mix(0.0, 8.0 * sin(sum * 10.0 + time), flags.z);

			vec4 mvPosition;
			mvPosition = modelViewMatrix * pos;
			gl_Position = projectionMatrix * mvPosition;
		}
	]]></shader>

	<shader type="vertex" name="test"><![CDATA[
		uniform vec3 tintColor;
		uniform vec3 flickerColor;
		uniform float curTime;
		uniform vec4 offsetRepeat;
		uniform float rnd;
		uniform float lighting;

		uniform sampler2D boneTexture;

		varying vec3 vColor;

		const vec3 vec3Unit = vec3(1.0, 1.0, 1.0);

		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, N_BONE_PIXEL_X );
			float y = floor( j / N_BONE_PIXEL_X );
			const float dx = 1.0 / N_BONE_PIXEL_X;
			const float dy = 1.0 / N_BONE_PIXEL_Y;
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
		
		void main() {
			mat4 boneMatX = getBoneMatrix( skinIndex.x );
			mat4 boneMatY = getBoneMatrix( skinIndex.y );

			vec4 skinVertex = vec4( position, 1.0 );
			vec4 skinned  = boneMatX * skinVertex * skinWeight.x;
			skinned 	  += boneMatY * skinVertex * skinWeight.y;

			vColor = vec3(0.0,0.0,0.0);

			vec4 pos = skinned;

			vec4 mvPosition;
			mvPosition = modelViewMatrix * pos;
			gl_Position = projectionMatrix * mvPosition;
		}
	]]></shader>

	<shader type="fragment" name="test"><![CDATA[
		uniform float opacity;

		varying vec3 vColor;

		void main() {
			gl_FragColor = vec4( 0.7,0.7,0.7,1.0 );
		}
	]]></shader>

	<shader type="fragment" name="standard"><![CDATA[
		uniform float opacity;
		uniform sampler2D map;

		varying vec3 vColor;
		varying vec2 vUv;

		void main() {
			vec4 texelColor = texture2D( map, vUv );
			gl_FragColor = texelColor;
			if ( gl_FragColor.a < 0.5 ) discard;
			gl_FragColor = gl_FragColor * vec4( vColor, 1.0/*opacity*/ );
		}
	]]></shader>

	<shader type="fragment" name="standard_fog"><![CDATA[
		uniform float opacity;
		uniform sampler2D map;

		varying vec3 vColor;
		varying vec2 vUv;

		const vec3 fogColor = vec3(0.0, 0.0, 0.0);
		const float fogNear = 14000.0;
		const float fogFar = 21000.0;

		void main() {
			vec4 texelColor = texture2D( map, vUv );
			gl_FragColor = texelColor;
			if ( gl_FragColor.a < 0.5 ) discard;
			gl_FragColor = gl_FragColor * vec4( vColor, opacity );

			float depth = gl_FragCoord.z / gl_FragCoord.w;
			float fogFactor = smoothstep( fogNear, fogFar, depth );
			gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );
		}
	]]></shader>
</shaders>
